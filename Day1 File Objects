# File and FileReader.
File and FileReader are part of the File API, which provides a way to interact with files asynchronously. 
The File object represents a file on the user's computer or a file reference that may be created programmatically. It is typically obtained from an input element of type "file" in an HTML form or through drag and drop operations.

# Properties of the File Object:
name: The name of the file.
size: The size of the file in bytes.
type: The MIME type of the file.
lastModified: A timestamp representing the last modified time of the file.

# Example of creating a File object: 
const file = new File(["Hello, World!"], "hello.txt", { type: "text/plain" });

# FileReader Object:
The FileReader object allows you to read the contents of a File or a Blob asynchronously. It provides several methods for reading different types of data, such as text or binary data, from a file.

# Methods of the FileReader Object:
readAsText(file, encoding): Reads the contents of the specified File or Blob as text.
readAsDataURL(file): Reads the contents of the specified File or Blob as a data URL.
readAsArrayBuffer(file): Reads the contents of the specified File or Blob as an ArrayBuffer.
readAsBinaryString(file): Reads the contents of the specified File or Blob as a binary string (deprecated).
abort(): Aborts the read operation.

# Example of using FileReader to read the contents of a file:
const fileInput = document.getElementById('file-input');

fileInput.addEventListener('change', (event) => {
    const file = event.target.files[0];
    const reader = new FileReader();

    reader.onload = function(event) {
        console.log(event.target.result); // Contents of the file as text
    };

    reader.readAsText(file);
});

The choice of read method depends on which format we prefer, how we are going to use data.

readAsArrayBuffer – for binary files, to do low-level binary operations. For high-level operations, like slicing, File inherits from Blob, so we can call them directly, without reading.

readAsText – for text files, when we’d like to get a string.

readAsDataURL – when we’d like to use this data in src for img or another tag. There’s an alternative to reading a file for that, as discussed in chapter Blob: URL.createObjectURL(file).

As the reading proceeds, there are events:

loadstart – loading started.
progress – occurs during reading.
load – no errors, reading complete.
abort – abort() called.
error – error has occurred.
loadend – reading finished with either success or failure.
When the reading is finished, we can access the result as:

reader.result is the result (if successful)
reader.error is the error (if failed).
The most widely used events are for sure load and error.

# FileReader for blobs

As mentioned in the chapter Blob, FileReadercan reads not just files, but any blobs.

We can use it to convert a blob to another format:

readAsArrayBuffer(blob) – to ArrayBuffer,
readAsText(blob, [encoding]) – to string (an alternative to TextDecoder),
readAsDataURL(blob) – to base64 data url.
FileReaderSync is available inside Web Workers

For Web Workers, there also exists a synchronous variant of FileReader, called FileReaderSync.

Its reading methods read* do not generate events, but rather return a result, as regular functions do.

That’s only inside a Web Worker though, because delays in synchronous calls, which are possible while reading from files, in Web Workers are less important. They do not affect the page.
FileReader is a JavaScript object that provides an asynchronous way to read the contents of files or blobs (binary large objects). It's commonly used in web applications for tasks involving file handling and data manipulation.


# FETCH

fetch() is a modern web API in JavaScript used for making network requests (e.g., fetching data from an API). It provides a more powerful and flexible feature set than the older XMLHttpRequest.
# Important Concepts:
Promises: fetch() returns a Promise that resolves to the Response object representing the response to the request.

Chaining: .then() and .catch() are used to handle the asynchronous nature of the fetch operation. You can chain multiple .then() to perform operations on the response data, and .catch() to handle errors.

Response Object: The Response object represents the response to the request. You can check the status, and headers, and parse the body in various formats (JSON, text, etc.).

JSON Parsing: The example above uses .json() to parse the response body as JSON. Other methods like .text() and .blob() can be used to handle different types of response bodies.

Handling Headers: fetch() allows you to handle request and response headers, enabling you to send custom headers for authentication or other purpose.

Request Options: fetch() can accept a second argument, an options object, where you can specify request method (GET, POST, etc.), headers, body content, mode (CORS, same-origin, etc.), and other properties.

Async/Await: fetch() can be used with async/await syntax, providing a more synchronous-like and readable way to handle asynchronous operations.
fetch() is widely used in modern web development for interacting with APIs and fetching data asynchronously, making it a fundamental tool for creating dynamic and interactive web applications.

# Basic Syntax of fetch:
fetch(url)
  .then(response => response.json()) // Parse the response as JSON
  .then(data => console.log(data))   // Handle the data from the response
  .catch(error => console.error(error)); // Handle errors, if any
async function fetchData(url) {
  try {
    const response = await fetch(url);
    const data = await response.json();
    console.log(data);
  } catch (error) {
    console.error('Error:', error);
  }
}


# EXAMPLE OF FETCH:

fetch('https://api.example.com/data')
  .then(response => {
    if (!response.ok) {
      throw new Error('Network response was not ok');
    }
    return response.json(); // Parse JSON data from the response body
  })
  .then(data => {
    console.log(data); // Handle the parsed data
  })
  .catch(error => {
    console.error('There has been a problem with your fetch operation:', error);
  });

 # There’s a list of forbidden HTTP headers that we can’t set:

· Accept-Charset, Accept-Encoding

· Access-Control-Request-Headers

· Access-Control-Request-Method

· Connection

· Content-Length

· Cookie, Cookie2

· Date

· DNT

· Expect

· Host

· Keep-Alive

· Origin

· Referer

· TE

· Trailer

· Transfer-Encoding

· Upgrade

· Via

· Proxy-*

· Sec-*

These headers ensure proper and safe HTTP, so they are controlled exclusively by the browser.


# Sending the IMAGE

vResponse properties:

response.status – HTTP code of the response,

response.ok – true is the status is 200-299.

response.headers – Map-like object with HTTP headers.

Methods to get response body:

response.json() – parse the response as JSON object,

response.text() – return the response as text,

response.formData() – return the response as FormData object (form/multipart encoding, see the next chapter),

response.blob() – return the response as Blob(binary data with type),

response.arrayBuffer() – return the response as ArrayBuffer (pure binary data),

Fetch options so far:

method – HTTP-method,

headers – an object with request headers (not any header is allowed),

body – string, FormData, BufferSource, Blob or UrlSearchParams object to send.
