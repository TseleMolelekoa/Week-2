# The constructor is:

let formData = new FormData([form]);

If HTML form element is provided, it automatically captures its fields. As you may have already guessed, FormData is an object to store and send form data.

The special thing about FormData is that network methods, such as fetch, can accept a FormDataobject as a body. It’s encoded and sent out with Content-Type: form/multipart. So, from the server point of view, that looks like a usual form submission.

# We can modify fields in FormData with methods:

formData.append(name, value) – add a form field with the given name and value,
formData.append(name, blob, fileName) – add a field as if it were <input type="file">, the third argument fileName sets file name (not form field name), as it it were a name of the file in user’s filesystem,
formData.delete(name) – remove the field with the given name,
formData.get(name) – get the value of the field with the given name,
formData.has(name) – if there exists a field with the given name, returns true, otherwise false
A form is technically allowed to have many fields with the same name, so multiple calls to append add more same-named fields.

There’s also method set, with the same syntax as append. The difference is that .set removes all fields with the given name, and then appends a new field. So it makes sure there’s only field with such name:

formData.set(name, value),
formData.set(name, blob, fileName).
