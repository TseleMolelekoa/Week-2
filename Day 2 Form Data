# The constructor is:

let formData = new FormData([form]);

If HTML form element is provided, it automatically captures its fields. As you may have already guessed, FormData is an object to store and send form data.

The special thing about FormData is that network methods, such as fetch, can accept a FormDataobject as a body. It’s encoded and sent out with Content-Type: form/multipart. So, from the server point of view, that looks like a usual form submission.

# We can modify fields in FormData with methods:

formData.append(name, value) – add a form field with the given name and value,
formData.append(name, blob, fileName) – add a field as if it were <input type="file">, the third argument fileName sets file name (not form field name), as it it were a name of the file in user’s filesystem,
formData.delete(name) – remove the field with the given name,
formData.get(name) – get the value of the field with the given name,
formData.has(name) – if there exists a field with the given name, returns true, otherwise false
A form is technically allowed to have many fields with the same name, so multiple calls to append add more same-named fields.

There’s also method set, with the same syntax as append. The difference is that .set removes all fields with the given name, and then appends a new field. So it makes sure there’s only field with such name:

formData.set(name, value),
formData.set(name, blob, fileName).


# FormData Methods

We can modify fields in FormData with methods:

formData.append(name, value) – add a form field with the given name and value,
formData.append(name, blob, fileName) – add a field as if it were <input type="file">, the third argument fileName sets file name (not form field name), as it it were a name of the file in user’s filesystem,
formData.delete(name) – remove the field with the given name,
formData.get(name) – get the value of the field with the given name,
formData.has(name) – if there exists a field with the given name, returns true, otherwise false
A form is technically allowed to have many fields with the same name, so multiple calls to append add more same-named fields.

There’s also method set, with the same syntax as append. The difference is that .set removes all fields with the given name, and then appends a new field. So it makes sure there’s only field with such name:

formData.set(name, value),
formData.set(name, blob, fileName).


# Sending a form with a file

 <form id="'formElem">
            <input type="text" name="FirstName" value="John">
            Picture: <input type="file" name="picture" accept="image/*">
            <input type="submit">

        </form>
        <script>
            formElem.onsubmit = async(e) => {
                e.preventDefault();

                let Responses = await fetch('/article/formdata/post/user-awatar', {
                    method: 'POST',
                    body: new FormData(formElem)
                });
                let results = await response.json();
                alert(result.message);
            };

# Sending a form with Blob data

In practice though, it’s often convenient to send an image not separately, but as a part of the form, with additional fields, such as “name” and other metadata.

The form has fields for name, email, and notes (a textarea).
The JavaScript code attaches a submit event listener to the form. When the form is submitted, it prevents the default form submission behavior using event.preventDefault().
It then creates a FormData object containing the form data.
It creates a Blob containing the notes data from the textarea and appends it to the FormData object using formData.append('notes', notes, 'notes.txt').
Finally, it uses the Fetch API to send the form data (including the Blob data) to the server-side script specified in the fetch call. You should replace '/submit' with the actual URL where you want to handle the form submission on your server.
servers are usually more suited to accept multipart-encoded forms, rather than raw binary data.

FormData objects are used to capture HTML form and submit it using fetch or another network method.

We can either create new FormData(form) from an HTML form, or create an empty object, and then append fields with methods:

formData.append(name, value)
formData.append(name, blob, fileName)
formData.set(name, value)
formData.set(name, blob, fileName)
Two peculiarities here:

The set method removes fields with the same name, append doesn’t.
To send a file, 3-argument syntax is needed, the last argument is a file name, that normally is taken from user filesystem for <input type="file">.
Other methods are:

formData.delete(name)
formData.get(name)
formData.has(name)


 to handle the form data and Blob data on the server-side according to your server-side programming language (such as PHP, Python, Node.js, etc.).

 <body style="margin: 0">
        <canvas id="canvansElem" width="100" height="80" style="border: 1px solid"></canvas>
        <input type="button" value="Submit" onclick="submit()">
        <script>
            canvasElem.onmousemove = function(e){
                let ctx = canvasElem.getContext('2d');
                ctx.lineTo(e.clientX, e.clientY);
                ctx.stroke();
            };
            async function submit(){
                let imageBlob = await new Promise(resolve => canvasElem.toBlob(resolve, 'image/png'));
                 let formData = new FormData();
                 formData.append("firstName", "John");
                 formData.append("image", imageBlob, "image.png");

                 let response = await fetch('/article/formdata/post/image-form',{
                    method: 'POST',
                    body: formData
                 });
                 let result = await response.json();
                 arlet(result.message);
            }
        </script>
    </body>

# Fetch: Download progress

The fetch method allows to track download progress.
Please note: there’s currently no way for fetch to track upload progress. For that purpose, please use XMLHttpRequest, we’ll cover it later.
To track download progress, we can use response.body property. It’s a “readable stream” – a special object that provides body chunk-by-chunk, as it comes.
Unlike response.text(), response.json() and other methods, response.body gives full control over the reading process, and we can count how much is consumed at any moment.
The result of await reader.read() call is an object with two properties:

done – true when the reading is complete.
value – a typed array of bytes: Uint8Array.
We wait for more chunks in the loop, until done is true.

To log the progress, we just need for every value add its length to the counter.

## Let’s explain that step-by-step:

We perform fetch as usual, but instead of calling response.json(), we obtain a stream reader response.body.getReader().
Please note, we can’t use both these methods to read the same response. Either use a reader or a response method to get the result.
Prior to reading, we can figure out the full response length from the Content-Length header.
It may be absent for cross-domain requests (see chapter Fetch: Cross-Origin Requests) and, well, technically a server doesn’t have to set it. But usually it’s at place.
Call await reader.read() until it’s done.
We gather response chunks in the array. That’s important, because after the response is consumed, we won’t be able to “re-read” it using response.json() or another way (you can try, there’ll be an error).
At the end, we have chunks – an array of Uint8Array byte chunks. We need to join them into a single result. Unfortunately, there’s no single method that concatenates those, so there’s some code to do that:
We create new Uint8Array(receivedLength) – a same-typed array with the combined length.
Then use .set(chunk, position) method to copy each chunk one after another in the resulting array.
We have the result in chunksAll. It’s a byte array though, not a string.
To create a string, we need to interpret these bytes. The built-in TextDecoder does exactly that. Then we can JSON.parse it.

What if we need binary content instead of JSON? That’s even simpler. Replace steps 4 and 5 with a single call to a blob from all chunks:

let blob = new Blob(chunks);

At we end we have the result (as a string or a blob, whatever is convenient), and progress-tracking in the process.

please note, that’s not for upload progress (no way now with fetch), only for.

# Fetch: Abort

Aborting a fetch is a little bit tricky. Remember, fetch returns a promise. And JavaScript generally has no concept of “aborting” a promise. So how can we cancel a fetch?

There’s a special built-in object for such purposes: AbortController.

The usage is pretty simple:

Step 1: create a controller:
let controller = new AbortController();

A controller is an extremely simple object. It has a single method abort(), and a single property signal. When abort() is called, the abortevent triggers on controller.signal.

Step 2: pass the signal property to fetch option:
let controller = new AbortController();
fetch(url, {
  signal: controller.signal

});

Now fetch listens to the signal.

Step 3: to abort, call controller.abort():
controller.abort();

We’re done: fetch gets the event from signal and aborts the request.

When a fetch is aborted, its promise rejects with an error named AbortError, so we should handle it.
AbortController is scalable, it allows to cancel multiple fetches at once.

For instance, here we fetch many urls in parallel, and the controller aborts them all
